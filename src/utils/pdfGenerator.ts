import { Lead, User } from '@/types'
import { formatResponseTime } from '@/utils/dateCalculations'

// Helper function to properly encode Arabic and UTF-8 text for PDF
const encodePdfText = (text: string): string => {
  if (!text) return ''
  
  try {
    // For Arabic text, try to handle encoding issues
    const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/.test(text)
    
    if (hasArabic) {
      // Convert Arabic text to a format that can be displayed
      // For now, return a placeholder that indicates Arabic content
      return `[Arabic: ${text.length} chars]`
    }
    
    return text
  } catch (error) {
    console.warn('Text encoding error:', error)
    return text
  }
}

// This function will be loaded dynamically on the client side
export const generateSummaryReport = async (filteredTenders: Lead[], user: User) => {
  if (typeof window === 'undefined') return null
  
  try {
    const jsPDF = (await import('jspdf')).default
    const { default: autoTable } = await import('jspdf-autotable')
    
    const doc = new jsPDF()
    
    // Header
    doc.setFontSize(20)
    doc.setTextColor(40, 44, 52)
    doc.text('Mirage Business Solutions', 20, 25)
    
    doc.setFontSize(16)
    doc.setTextColor(74, 144, 226)
    doc.text('Leads Summary Report', 20, 35)
    
    doc.setFontSize(10)
    doc.setTextColor(100, 100, 100)
    doc.text(`Generated by: ${encodePdfText(user.name)} (${user.username})`, 20, 45)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 50)
    doc.text(`Total Leads: ${filteredTenders.length}`, 20, 55)
    
    // Statistics
    const wonTenders = filteredTenders.filter(t => t.tenderStatus === 'Won').length
    const lostTenders = filteredTenders.filter(t => t.tenderStatus === 'Lost').length
    const underReviewTenders = filteredTenders.filter(t => t.tenderStatus === 'Under review').length
    const winRate = filteredTenders.length > 0 ? (wonTenders / filteredTenders.length * 100).toFixed(1) : '0'
    
    const totalRevenue = filteredTenders
      .filter(t => t.tenderStatus === 'Won' && t.sellingPrice)
      .reduce((sum, t) => sum + (t.sellingPrice || 0), 0)
    
    // Response Time Statistics
    const tendersWithResponseTime = filteredTenders.filter(t => t.responseTimeInDays !== null)
    const avgResponseTime = tendersWithResponseTime.length > 0 
      ? (tendersWithResponseTime.reduce((sum, t) => sum + (t.responseTimeInDays || 0), 0) / tendersWithResponseTime.length).toFixed(1)
      : 'N/A'
    const fastResponses = tendersWithResponseTime.filter(t => (t.responseTimeInDays || 0) <= 1).length
    const pendingResponses = filteredTenders.filter(t => t.dateOfPriceRequestToVendor && !t.dateOfPriceReceivedFromVendor).length
    
    doc.setFontSize(12)
    doc.setTextColor(40, 44, 52)
    doc.text('Key Statistics:', 20, 70)
    
    const stats = [
      ['Total Leads', filteredTenders.length.toString()],
      ['Won Leads', wonTenders.toString()],
      ['Lost Leads', lostTenders.toString()],
      ['Under Review', underReviewTenders.toString()],
      ['Win Rate', `${winRate}%`],
      ['Total Revenue (Won)', `${totalRevenue.toLocaleString()} JD`],
      ['Avg Response Time', avgResponseTime === 'N/A' ? 'N/A' : `${avgResponseTime} days`],
      ['Fast Responses (â‰¤1 day)', fastResponses.toString()],
      ['Pending Responses', pendingResponses.toString()]
    ]
    
    autoTable(doc, {
      startY: 75,
      head: [['Metric', 'Value']],
      body: stats,
      theme: 'grid',
      headStyles: { fillColor: [74, 144, 226] },
      margin: { left: 20, right: 20 }
    })
    
    // Status Distribution
    const finalY = (doc as any).lastAutoTable.finalY || 120
    
    autoTable(doc, {
      startY: finalY + 10,
      head: [['Status', 'Count', 'Percentage']],
      body: [
        ['Won', wonTenders.toString(), `${filteredTenders.length > 0 ? (wonTenders / filteredTenders.length * 100).toFixed(1) : 0}%`],
        ['Lost', lostTenders.toString(), `${filteredTenders.length > 0 ? (lostTenders / filteredTenders.length * 100).toFixed(1) : 0}%`],
        ['Under Review', underReviewTenders.toString(), `${filteredTenders.length > 0 ? (underReviewTenders / filteredTenders.length * 100).toFixed(1) : 0}%`],
        ['Global Agreement', filteredTenders.filter(t => t.tenderStatus === 'Global Agreement').length.toString(), `${filteredTenders.length > 0 ? (filteredTenders.filter(t => t.tenderStatus === 'Global Agreement').length / filteredTenders.length * 100).toFixed(1) : 0}%`]
      ],
      theme: 'grid',
      headStyles: { fillColor: [74, 144, 226] },
      margin: { left: 20, right: 20 }
    })
    
    // Footer
    const pageHeight = doc.internal.pageSize.height
    doc.setFontSize(8)
    doc.setTextColor(100, 100, 100)
    doc.text('Generated by Mirage Business Solutions - Tender Tracking System', 20, pageHeight - 10)
    
    return doc
  } catch (error) {
    console.error('Error generating summary report:', error)
    return null
  }
}

// Generate a PDF preview for a single tender
export const generateTenderPreviewPDF = async (tender: Lead, user: User) => {
  if (typeof window === 'undefined') return null
  
  try {
    const jsPDF = (await import('jspdf')).default
    
    const doc = new jsPDF()
    let yPosition = 20
    
    // Helper function to format dates
    const formatDate = (date: Date | null | undefined) => {
      if (!date) return 'Not specified'
      return new Date(date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      })
    }

    // Helper function to format currency
    const formatCurrency = (amount: number | null | undefined) => {
      if (amount === null || amount === undefined) return 'Not specified'
      return `${amount.toLocaleString()} JD`
    }

    // Header
    doc.setFontSize(18)
    doc.setTextColor(30, 58, 138)
    doc.text('Mirage Business Solutions', 20, yPosition)
    yPosition += 8
    
    doc.setFontSize(14)
    doc.setTextColor(59, 130, 246)
    doc.text('Tender Details Preview', 20, yPosition)
    yPosition += 15
    
    // Tender ID and Status
    doc.setFontSize(12)
    doc.setTextColor(0, 0, 0)
    doc.text(`Tender ID: #${tender.id}`, 20, yPosition)
    doc.text(`Status: ${tender.tenderStatus}`, 120, yPosition)
    yPosition += 10
    
    // Customer Information
    doc.setFontSize(14)
    doc.setTextColor(30, 58, 138)
    doc.text('Customer Information', 20, yPosition)
    yPosition += 8
    
    doc.setFontSize(10)
    doc.setTextColor(0, 0, 0)
    doc.text(`Customer Name: ${encodePdfText(tender.customerName)}`, 20, yPosition)
    yPosition += 15
    
    // Timeline Information
    doc.setFontSize(14)
    doc.setTextColor(30, 58, 138)
    doc.text('Timeline Information', 20, yPosition)
    yPosition += 8
    
    doc.setFontSize(10)
    doc.setTextColor(0, 0, 0)
    
    const timelineData = [
      ['Tender Announcement Date:', formatDate(tender.tenderAnnouncementDate)],
      ['Request Date:', formatDate(tender.requestDate)],
      ['Submission Date:', formatDate(tender.submissionDate)],
      ['Price Request to Vendor:', formatDate(tender.dateOfPriceRequestToVendor)],
      ['Price Received from Vendor:', formatDate(tender.dateOfPriceReceivedFromVendor)]
    ]
    
    timelineData.forEach(([label, value]) => {
      doc.text(label, 20, yPosition)
      doc.text(value, 100, yPosition)
      yPosition += 6
    })
    
    yPosition += 10
    
    // Response Time Analysis
    if (tender.responseTimeInDays !== null) {
      doc.setFontSize(14)
      doc.setTextColor(30, 58, 138)
      doc.text('Response Time Analysis', 20, yPosition)
      yPosition += 8
      
      doc.setFontSize(10)
      doc.setTextColor(0, 0, 0)
      doc.text(`Response Time: ${formatResponseTime(tender.responseTimeInDays)}`, 20, yPosition)
      yPosition += 6
      
      // Performance assessment
      const performance = tender.responseTimeInDays <= 1 ? 'Excellent' :
                         tender.responseTimeInDays <= 3 ? 'Good' :
                         tender.responseTimeInDays <= 7 ? 'Average' : 'Needs Improvement'
      doc.text(`Performance Rating: ${performance}`, 20, yPosition)
      yPosition += 15
    }
    
    // Financial Information
    doc.setFontSize(14)
    doc.setTextColor(30, 58, 138)
    doc.text('Financial Information', 20, yPosition)
    yPosition += 8
    
    doc.setFontSize(10)
    doc.setTextColor(0, 0, 0)
    
    const financialData: string[][] = []
    
    // Add Cost from Vendor if user has permission
    if (user.permissions?.canViewCostFromVendor) {
      financialData.push(['Cost from Vendor:', formatCurrency(tender.costFromVendor)])
    } else {
      financialData.push(['Cost from Vendor:', 'Restricted - Limited permissions'])
    }
    
    // Add Selling Price if user has permission
    if (user.permissions?.canViewSellingPrice) {
      financialData.push(['Selling Price:', formatCurrency(tender.sellingPrice)])
    } else {
      financialData.push(['Selling Price:', 'Restricted - Limited permissions'])
    }
    
    // Add Profit Margin if user has permission
    if (user.permissions?.canViewProfitMargin) {
      financialData.push(['Profit Margin:', tender.profitMargin !== null ? `${tender.profitMargin.toFixed(1)}%` : 'Not calculated'])
    } else {
      financialData.push(['Profit Margin:', 'Restricted - Limited permissions'])
    }
    
    // Add Estimated Profit if user has both cost and selling price permissions
    if (user.permissions?.canViewCostFromVendor && user.permissions?.canViewSellingPrice) {
      financialData.push(['Estimated Profit:', tender.costFromVendor && tender.sellingPrice ? formatCurrency(tender.sellingPrice - tender.costFromVendor) : 'Not calculated'])
    } else {
      financialData.push(['Estimated Profit:', 'Restricted - Limited permissions'])
    }
    
    financialData.forEach(([label, value]) => {
      doc.text(label, 20, yPosition)
      doc.text(value, 70, yPosition)
      yPosition += 6
    })
    
    yPosition += 10
    
    // Additional Information
    if (tender.competitorWinningPrice) {
      doc.setFontSize(14)
      doc.setTextColor(30, 58, 138)
      doc.text('Competitor Information', 20, yPosition)
      yPosition += 8
      
      doc.setFontSize(10)
      doc.setTextColor(0, 0, 0)
      doc.text(`Competitor Winning Price: ${tender.competitorWinningPrice}`, 20, yPosition)
      yPosition += 15
    }
    
    // Audit Trail
    doc.setFontSize(14)
    doc.setTextColor(30, 58, 138)
    doc.text('Audit Trail', 20, yPosition)
    yPosition += 8
    
    doc.setFontSize(10)
    doc.setTextColor(0, 0, 0)
    doc.text(`Created by: ${tender.addedBy}`, 20, yPosition)
    yPosition += 6
    doc.text(`Created on: ${formatDate(tender.createdAt)}`, 20, yPosition)
    yPosition += 6
    
    if (tender.lastEditedBy) {
      doc.text(`Last edited by: ${tender.lastEditedBy}`, 20, yPosition)
      yPosition += 6
      doc.text(`Last edited on: ${tender.lastEditedAt ? formatDate(tender.lastEditedAt) : 'Unknown'}`, 20, yPosition)
      yPosition += 6
    }
    
    // Footer
    const pageHeight = doc.internal.pageSize.height
    doc.setFontSize(8)
    doc.setTextColor(100, 100, 100)
    doc.text(`Generated by: ${user.name} on ${new Date().toLocaleString()}`, 20, pageHeight - 20)
    doc.text('Mirage Business Solutions | +962 6 569 13 33 | m.abuosba@miragebs.com', 20, pageHeight - 10)
    
    return doc
  } catch (error) {
    console.error('Error generating tender preview PDF:', error)
    throw error
  }
}

// Generate Detailed Report
export const generateDetailedReport = async (filteredTenders: Lead[], user: User) => {
  if (typeof window === 'undefined') return null
  
  try {
    const jsPDF = (await import('jspdf')).default
    const { default: autoTable } = await import('jspdf-autotable')
    
    const doc = new jsPDF()
    
    // Header
    doc.setFontSize(20)
    doc.setTextColor(40, 44, 52)
    doc.text('Mirage Business Solutions', 20, 25)
    
    doc.setFontSize(16)
    doc.setTextColor(74, 144, 226)
    doc.text('Detailed Tenders Report', 20, 35)
    
    doc.setFontSize(10)
    doc.setTextColor(100, 100, 100)
    doc.text(`Generated by: ${user.name} (${user.username})`, 20, 45)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 50)
    doc.text(`Total Tenders: ${filteredTenders.length}`, 20, 55)
    
    // Format currency with user permission check
    const formatCurrency = (amount: number | null) => {
      if (amount === null || amount === undefined) return 'N/A'
      return `${amount.toLocaleString()} JD`
    }
    
    // Table headers based on permissions
    const headers = ['Customer', 'Category', 'Status', 'Submission Date']
    
    if (user.permissions?.canViewSellingPrice) {
      headers.push('Selling Price')
    }
    if (user.permissions?.canViewCostFromVendor) {
      headers.push('Cost from Vendor')
    }
    if (user.permissions?.canViewProfitMargin) {
      headers.push('Profit Margin')
    }
    
    // Table body with permission-based data
    const body = filteredTenders.map(tender => {
      const row = [
        encodePdfText(tender.customerName),
        tender.category,
        tender.tenderStatus,
        tender.submissionDate ? new Date(tender.submissionDate).toLocaleDateString() : 'N/A'
      ]
      
      if (user.permissions?.canViewSellingPrice) {
        row.push(formatCurrency(tender.sellingPrice))
      }
      
      if (user.permissions?.canViewCostFromVendor) {
        row.push(formatCurrency(tender.costFromVendor))
      }
      
      if (user.permissions?.canViewProfitMargin) {
        row.push(tender.profitMargin !== null ? `${tender.profitMargin.toFixed(1)}%` : 'N/A')
      }
      
      return row
    })
    
    autoTable(doc, {
      startY: 70,
      head: [headers],
      body,
      theme: 'grid',
      headStyles: { fillColor: [74, 144, 226] },
      margin: { left: 20, right: 20 },
      styles: { fontSize: 8 }
    })
    
    // Add item details section if any tender has items
    const tendersWithItems = filteredTenders.filter(tender => tender.items && tender.items.length > 0)
    if (tendersWithItems.length > 0 && user.permissions?.canViewTenderItems) {
      let currentY = (doc as any).lastAutoTable.finalY + 20
      
      // Check if we need a new page
      if (currentY > doc.internal.pageSize.height - 60) {
        ;(doc as any).addPage()
        currentY = 30
      }
      
      doc.setFontSize(14)
      doc.setTextColor(40, 44, 52)
      doc.text('Tender Items Details', 20, currentY)
      currentY += 15
      
      tendersWithItems.forEach((tender, tenderIndex) => {
        // Check if we need a new page for this tender
        if (currentY > doc.internal.pageSize.height - 100) {
          ;(doc as any).addPage()
          currentY = 30
        }
        
        doc.setFontSize(12)
        doc.setTextColor(74, 144, 226)
        doc.text(`${encodePdfText(tender.customerName)} (${tender.category.join(', ')})`, 20, currentY)
        currentY += 10
        
        // Items table headers
        const itemHeaders = ['Description', 'Part Number', 'Quantity']
        if (user.permissions?.canViewCostFromVendor) itemHeaders.push('Cost from Vendor (JD)')
        if (user.permissions?.canViewSellingPrice) itemHeaders.push('Selling Price (JD)')
        if (user.permissions?.canViewProfitMargin) itemHeaders.push('Profit Margin (%)')
        itemHeaders.push('Total (JD)')
        
        // Items table body
        const itemsBody = tender.items.map(item => {
          const row = [
            item.description || 'N/A',
            item.partNumber || 'N/A',
            item.quantity.toString()
          ]
          
          if (user.permissions?.canViewCostFromVendor) {
            row.push(item.costFromVendor ? item.costFromVendor.toLocaleString() : 'N/A')
          }
          if (user.permissions?.canViewSellingPrice) {
            row.push(item.sellingPrice ? item.sellingPrice.toLocaleString() : 'N/A')
          }
          if (user.permissions?.canViewProfitMargin) {
            row.push(item.profitMargin !== null ? `${item.profitMargin.toFixed(1)}%` : 'N/A')
          }
          row.push(item.totalPrice ? item.totalPrice.toLocaleString() : '0')
          
          return row
        })
        
        autoTable(doc, {
          startY: currentY,
          head: [itemHeaders],
          body: itemsBody,
          theme: 'striped',
          headStyles: { fillColor: [108, 117, 125], fontSize: 8 },
          margin: { left: 20, right: 20 },
          styles: { fontSize: 7 }
        })
        
        currentY = (doc as any).lastAutoTable.finalY + 15
      })
    }
    
    // Footer
    const pageHeight = doc.internal.pageSize.height
    doc.setFontSize(8)
    doc.setTextColor(100, 100, 100)
    doc.text('Generated by Mirage Business Solutions - Tender Tracking System', 20, pageHeight - 10)
    
    return doc
  } catch (error) {
    console.error('Error generating detailed report:', error)
    return null
  }
}

// Generate Financial Report
export const generateFinancialReport = async (filteredTenders: Lead[], user: User) => {
  if (typeof window === 'undefined') return null
  
  try {
    const jsPDF = (await import('jspdf')).default
    const { default: autoTable } = await import('jspdf-autotable')
    
    const doc = new jsPDF()
    
    // Check permissions first
    const hasAnyFinancialPermission = user.permissions?.canViewCostFromVendor || 
                                      user.permissions?.canViewSellingPrice || 
                                      user.permissions?.canViewProfitMargin
    
    if (!hasAnyFinancialPermission) {
      // Header
      doc.setFontSize(20)
      doc.setTextColor(40, 44, 52)
      doc.text('Mirage Business Solutions', 20, 25)
      
      doc.setFontSize(16)
      doc.setTextColor(74, 144, 226)
      doc.text('Financial Report - Access Restricted', 20, 35)
      
      doc.setFontSize(12)
      doc.setTextColor(255, 0, 0)
      doc.text('You do not have permission to view financial information.', 20, 60)
      doc.text('Please contact your administrator for access.', 20, 75)
      
      return doc
    }
    
    // Header
    doc.setFontSize(20)
    doc.setTextColor(40, 44, 52)
    doc.text('Mirage Business Solutions', 20, 25)
    
    doc.setFontSize(16)
    doc.setTextColor(74, 144, 226)
    doc.text('Financial Tenders Report', 20, 35)
    
    doc.setFontSize(10)
    doc.setTextColor(100, 100, 100)
    doc.text(`Generated by: ${user.name} (${user.username})`, 20, 45)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 50)
    
    // Calculate financial statistics based on permissions
    const wonTenders = filteredTenders.filter(t => t.tenderStatus === 'Won')
    
    const totalRevenue = user.permissions?.canViewSellingPrice ? 
      wonTenders.reduce((sum, t) => sum + (t.sellingPrice || 0), 0) : 0
      
    const totalCost = user.permissions?.canViewCostFromVendor ? 
      wonTenders.reduce((sum, t) => sum + (t.costFromVendor || 0), 0) : 0
      
    const totalProfit = (user.permissions?.canViewCostFromVendor && user.permissions?.canViewSellingPrice) ? 
      totalRevenue - totalCost : 0
    doc.text(`Won Tenders: ${wonTenders.length}`, 20, 55)
    
    let yPos = 65
    if (user.permissions?.canViewSellingPrice) {
      doc.text(`Total Revenue: ${totalRevenue.toLocaleString()} JD`, 20, yPos)
      yPos += 5
    }
    if (user.permissions?.canViewCostFromVendor) {
      doc.text(`Total Cost: ${totalCost.toLocaleString()} JD`, 20, yPos)
      yPos += 5
    }
    if (user.permissions?.canViewCostFromVendor && user.permissions?.canViewSellingPrice) {
      doc.text(`Total Profit: ${totalProfit.toLocaleString()} JD`, 20, yPos)
      yPos += 5
    }
    
    // Financial table with permission-based columns
    const formatCurrency = (amount: number | null) => {
      if (amount === null || amount === undefined) return 'N/A'
      return `${amount.toLocaleString()} JD`
    }
    
    // Build headers based on permissions
    const headers = ['Customer']
    if (user.permissions?.canViewSellingPrice) headers.push('Selling Price')
    if (user.permissions?.canViewCostFromVendor) headers.push('Cost from Vendor')
    if (user.permissions?.canViewCostFromVendor && user.permissions?.canViewSellingPrice) headers.push('Profit')
    if (user.permissions?.canViewProfitMargin) headers.push('Margin %')
    
    // Build table body based on permissions
    const body = wonTenders.map(tender => {
      const row = [encodePdfText(tender.customerName)]
      
      if (user.permissions?.canViewSellingPrice) {
        row.push(formatCurrency(tender.sellingPrice))
      }
      if (user.permissions?.canViewCostFromVendor) {
        row.push(formatCurrency(tender.costFromVendor))
      }
      if (user.permissions?.canViewCostFromVendor && user.permissions?.canViewSellingPrice) {
        row.push(tender.costFromVendor && tender.sellingPrice ? 
          formatCurrency(tender.sellingPrice - tender.costFromVendor) : 'N/A')
      }
      if (user.permissions?.canViewProfitMargin) {
        row.push(tender.profitMargin !== null ? `${tender.profitMargin.toFixed(1)}%` : 'N/A')
      }
      
      return row
    })
    
    autoTable(doc, {
      startY: yPos + 10,
      head: [headers],
      body,
      theme: 'grid',
      headStyles: { fillColor: [74, 144, 226] },
      margin: { left: 20, right: 20 },
      styles: { fontSize: 9 }
    })
    
    // Footer
    const pageHeight = doc.internal.pageSize.height
    doc.setFontSize(8)
    doc.setTextColor(100, 100, 100)
    doc.text('Generated by Mirage Business Solutions - Tender Tracking System', 20, pageHeight - 10)
    
    return doc
  } catch (error) {
    console.error('Error generating financial report:', error)
    return null
  }
}

// Generate Response Time Report
export const generateResponseTimeReport = async (filteredTenders: Lead[], user: User) => {
  if (typeof window === 'undefined') return null
  
  try {
    const jsPDF = (await import('jspdf')).default
    const { default: autoTable } = await import('jspdf-autotable')
    
    const doc = new jsPDF()
    
    // Header
    doc.setFontSize(20)
    doc.setTextColor(40, 44, 52)
    doc.text('Mirage Business Solutions', 20, 25)
    
    doc.setFontSize(16)
    doc.setTextColor(74, 144, 226)
    doc.text('Response Time Report', 20, 35)
    
    doc.setFontSize(10)
    doc.setTextColor(100, 100, 100)
    doc.text(`Generated by: ${user.name} (${user.username})`, 20, 45)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 50)
    
    // Response time statistics
    const tendersWithResponseTime = filteredTenders.filter(t => t.responseTimeInDays !== null)
    const avgResponseTime = tendersWithResponseTime.length > 0 
      ? (tendersWithResponseTime.reduce((sum, t) => sum + (t.responseTimeInDays || 0), 0) / tendersWithResponseTime.length).toFixed(1)
      : 'N/A'
    const fastResponses = tendersWithResponseTime.filter(t => (t.responseTimeInDays || 0) <= 1).length
    const slowResponses = tendersWithResponseTime.filter(t => (t.responseTimeInDays || 0) > 7).length
    
    doc.text(`Average Response Time: ${avgResponseTime} days`, 20, 60)
    doc.text(`Fast Responses (â‰¤1 day): ${fastResponses}`, 20, 65)
    doc.text(`Slow Responses (>7 days): ${slowResponses}`, 20, 70)
    
    // Response time table
    const body = filteredTenders
      .filter(tender => tender.dateOfPriceRequestToVendor)
      .map(tender => [
        encodePdfText(tender.customerName),
        tender.dateOfPriceRequestToVendor ? new Date(tender.dateOfPriceRequestToVendor).toLocaleDateString() : 'N/A',
        tender.dateOfPriceReceivedFromVendor ? new Date(tender.dateOfPriceReceivedFromVendor).toLocaleDateString() : 'Pending',
        tender.responseTimeInDays !== null ? `${tender.responseTimeInDays} days` : 'Pending'
      ])
    
    autoTable(doc, {
      startY: 85,
      head: [['Customer', 'Request Date', 'Response Date', 'Response Time']],
      body,
      theme: 'grid',
      headStyles: { fillColor: [74, 144, 226] },
      margin: { left: 20, right: 20 },
      styles: { fontSize: 9 }
    })
    
    // Footer
    const pageHeight = doc.internal.pageSize.height
    doc.setFontSize(8)
    doc.setTextColor(100, 100, 100)
    doc.text('Generated by Mirage Business Solutions - Tender Tracking System', 20, pageHeight - 10)
    
    return doc
  } catch (error) {
    console.error('Error generating response time report:', error)
    return null
  }
}
